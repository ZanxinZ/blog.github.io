<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>工具 on CodePaper</title>
    <link>https://wowios.com/categories/%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 工具 on CodePaper</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 May 2023 22:43:27 +0800</lastBuildDate>
    <atom:link href="https://wowios.com/categories/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>N4000 四网口工控机组网</title>
      <link>https://wowios.com/post/tool/wrt/setnetwork/</link>
      <pubDate>Sat, 13 May 2023 22:43:27 +0800</pubDate>
      <guid>https://wowios.com/post/tool/wrt/setnetwork/</guid>
      <description>&lt;h3 id=&#34;需要用到的硬件&#34;&gt;需要用到的硬件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;工控机本体这里称为 A，&lt;/li&gt;
&lt;li&gt;一台可以连接 WiFi 或者可插入以太网网线的设备称为 B。&lt;/li&gt;
&lt;li&gt;公网的接入端口线称为 C。&lt;/li&gt;
&lt;li&gt;一个 Wifi 路由器D。&lt;/li&gt;
&lt;li&gt;键盘与HDMI 显示器（用于命令行查看系统信息，可省略）、两条网线。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法一不同网段接法&#34;&gt;方法一：”不同网段“接法&lt;/h3&gt;
&lt;p&gt;软路由的 LAN 接 WiFi 的 WAN，连接 WiFi 的设备和直连软路由的设备不算是同一网段。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../N4000%20%E5%9B%9B%E7%BD%91%E5%8F%A3%E5%B7%A5%E6%8E%A7%E6%9C%BA%E7%BB%84%E7%BD%91/Untitled.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;WiFi 所在 192.168.1.x&lt;/p&gt;
&lt;p&gt;软路由所在 192.168.11.x&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以太网连接，从 C 上接一条网线到 A 的 eth1 端口。D 的 WAN 网口和 A 的 eth0 用网线连接。&lt;/li&gt;
&lt;li&gt;使用设备 B，连接 WiFi，然后登入后台管理页面，网址一般在 WiFi 路由器背后有写明。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设备B 需要关键一步：设置为 自动 IP 分配，那么才可以在 B 上访问到 192.168.11.1&lt;/p&gt;
&lt;p&gt;关键配置：&lt;/p&gt;
&lt;p&gt;登入D 的 后台页面（依据不同品牌而定，我这里是 192.168.1.1）。WiFi 路由器 D 的设置，需要设置为 自动获得 IP 地址，拔掉 WiFi 的电源，重启，它会通过A、公网 C 自动获得 IP。这时，连接到该 WiFi 的设备就可以通过 192.168.11.1 进入软路由的管理页面了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo 的一些问题</title>
      <link>https://wowios.com/post/tool/usehugo/someproblem/</link>
      <pubDate>Sat, 11 Mar 2023 16:59:18 +0800</pubDate>
      <guid>https://wowios.com/post/tool/usehugo/someproblem/</guid>
      <description>&lt;h2 id=&#34;若域名有变动&#34;&gt;若域名有变动&lt;/h2&gt;
&lt;p&gt;需要修改三个地方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;workflow 文件夹里 Github Acction 配置文件 &lt;code&gt;Action.yml&lt;/code&gt; 中的 &lt;code&gt;cname:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;config.yaml 中的 &lt;code&gt;baseURL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Github repository setting &lt;code&gt;Pages&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Hugo 发布一篇文章的过程</title>
      <link>https://wowios.com/post/tool/usehugo/publisharticle/</link>
      <pubDate>Sat, 11 Mar 2023 16:00:07 +0800</pubDate>
      <guid>https://wowios.com/post/tool/usehugo/publisharticle/</guid>
      <description>&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;windows：确保有 hugo.exe 在工程目录下, 并且 .gitignore 里面写上 &lt;code&gt;hugo.exe&lt;/code&gt;，即可&lt;/li&gt;
&lt;li&gt;Mac：确保 hugo 已安装就可以&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新建&#34;&gt;新建&lt;/h2&gt;
&lt;p&gt;一般，都在 post 文件夹下放 markdown 文件，使用不同文件夹来归类&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;hugo new post/tool/useHugo/publishArticle.md&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;书写&#34;&gt;书写&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;设定文章的 title, categories, tags&lt;/li&gt;
&lt;li&gt;写入内容。标题大小从 &lt;code&gt;##&lt;/code&gt; 开始&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;本地预览&#34;&gt;本地预览&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;hugo server&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;编译成-html输出到-docs-路径与-github-action-对应&#34;&gt;编译成 html，输出到 /docs （路径与 GitHub Action 对应）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;hugo&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;到这里，就完成了写作&lt;/p&gt;
&lt;h2 id=&#34;git-push&#34;&gt;Git Push&lt;/h2&gt;
&lt;p&gt;先 fetch，再 commit，再 push。&lt;/p&gt;
&lt;h3 id=&#34;github-page-需要重新填写域名&#34;&gt;&lt;del&gt;Github Page 需要重新填写域名&lt;/del&gt;&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;因为 Github Action 在执行的时候会把 master 分支中的 /docs 内所有内容拷贝到 main 分支，这里面不包括 CNAME 文件。所以在 repository 的 setting 的 pages 重新填写域名。&lt;/del&gt;&lt;strong&gt;（问题已经解决，在 workflow &lt;code&gt;action.yml&lt;/code&gt; 中添加 &lt;code&gt;cname: 1-1.link&lt;/code&gt;，所以如果域名有改动，需要在这修改）&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notion文件导出</title>
      <link>https://wowios.com/post/tool/notion/notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/</link>
      <pubDate>Sat, 11 Mar 2023 15:11:32 +0800</pubDate>
      <guid>https://wowios.com/post/tool/notion/notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/</guid>
      <description>&lt;h2 id=&#34;notion-批量文件导出以-pfd格式&#34;&gt;Notion 批量文件导出，以 PFD格式&lt;/h2&gt;
&lt;p&gt;Notion 是一款 markdown 笔记软件，可以快速书写，多端同步，支持文件导出，十分方便。
我在 notion 中写了很多页面，有时要转移到别的地方保存，那么应该怎么做呢？&lt;/p&gt;
&lt;h3 id=&#34;notion-支持导出的文件格式pdfhtmlmd&#34;&gt;notion 支持导出的文件格式：PDF，HTML，MD&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;可是，这几种方法都有缺点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PDF：只能当前页面，导出所有子页面，需要升级 Pro&lt;/li&gt;
&lt;li&gt;HTML：多出了一些附带的文件，文件散乱，转移和浏览都不方便&lt;/li&gt;
&lt;li&gt;MD：导出之后，图片和文本都分开，转移不方便，文件散乱&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;那么有没有更简单的办法获取我自己写的许多页面且保存为-pdf-&#34;&gt;那么，有没有更简单的办法获取我自己写的许多页面，且保存为 PDF ？&lt;/h3&gt;
&lt;p&gt;有的，步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在notion中包含子页面导出 markdown&lt;/li&gt;
&lt;li&gt;使用 vs code 打开，使用插件 Markdown PDF 逐页导出。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;具体操作步骤&#34;&gt;具体操作步骤&lt;/h3&gt;
&lt;p&gt;下图可以看到我的一个页面包含了多个子页面。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;右上角三个点的按钮，选择 export&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled2.png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;导出 markdown&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled3.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;会得到页面和子页面的目录结构&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled5.png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用 vscode 打开。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装插件 ”Markdown PDF“&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled6.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;搜索 Markdown PDF， 点击安装 install。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled7.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置 ”auto convert when save “&lt;/p&gt;
&lt;p&gt;在插件库里可以看到已安装 Markdown PDF&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled8.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled9.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样一来，打开一个 md 文件，ctrl + s，它就自动转换为 pdf 并输出到源路径了。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
