<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on CodePaper</title>
    <link>https://1-1.link/post/</link>
    <description>Recent content in Posts on CodePaper</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Jul 2022 14:46:06 +0800</lastBuildDate><atom:link href="https://1-1.link/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>各种设计模式</title>
      <link>https://1-1.link/post/design-pattern/all-design-pattern/</link>
      <pubDate>Mon, 11 Jul 2022 18:27:35 +0800</pubDate>
      
      <guid>https://1-1.link/post/design-pattern/all-design-pattern/</guid>
      <description>Creational Object Created Pattern
Factory Method Provide the method for creating an instance in the superclass, and allow the subclass to choose the type of the instance.
在父类中提供创建对象的方法，允许子类决定实例化对象的类型。
具备的部分：生产者协议、产品协议，往后就可以根据需要来扩展每一种产品。
具体的生产者比如 MongoCakeCreator 的存在是为了实现与产品相关的核心业务逻辑，而不仅仅是创建 MongoCake 实例。工厂方法将核心业务逻辑从具体产品类中分离出来。
 // Creator  protocol CakeCreator {  func createCake() -&amp;gt; Cake  func doSomethingForCake(cake: Cake) -&amp;gt; Cake  }   // Product  protocol Cake {  func doWork()  }   // ConcreteCreator  class MongoCakeCreator: CakeCreator {  var cake: MongoCake?</description>
    </item>
    
  </channel>
</rss>
