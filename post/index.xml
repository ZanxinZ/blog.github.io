<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on CodePaper</title>
    <link>https://wowios.com/post/</link>
    <description>Recent content in Posts on CodePaper</description>
    <generator>Hugo -- 0.140.1</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Dec 2024 14:41:19 +0800</lastBuildDate>
    <atom:link href="https://wowios.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Oc Summary</title>
      <link>https://wowios.com/post/oc-summary/oc-summary/</link>
      <pubDate>Sat, 28 Dec 2024 14:41:19 +0800</pubDate>
      <guid>https://wowios.com/post/oc-summary/oc-summary/</guid>
      <description>&lt;h2 id=&#34;类和结构体的区别&#34;&gt;类和结构体的区别&lt;/h2&gt;
&lt;h2 id=&#34;计算属性&#34;&gt;计算属性&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Rectangle&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; width: Double
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; height: Double
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 这是一个计算属性&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; area: Double {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; width &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; height
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 假设保持宽高比例不变&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ratio = width &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; height
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            height = sqrt(newValue &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; ratio)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            width = height &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ratio
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;关联对象&#34;&gt;关联对象&lt;/h2&gt;
&lt;h2 id=&#34;category-和-extension-的区别&#34;&gt;Category 和 Extension 的区别&lt;/h2&gt;
&lt;h3 id=&#34;category分类&#34;&gt;Category（分类）：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以在不修改原类源代码的情况下给类添加方法&lt;/li&gt;
&lt;li&gt;不能添加实例变量（存储属性），但可以使用关联对象&lt;/li&gt;
&lt;li&gt;可以被添加到任何类中，包括没有源码的类&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;运行时&lt;/strong&gt;添加方法&lt;/li&gt;
&lt;li&gt;可以有多个分类&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;extension扩展&#34;&gt;Extension（扩展）：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;只能在原类的实现文件（.m文件）中添加&lt;/li&gt;
&lt;li&gt;可以添加实例变量和属性&lt;/li&gt;
&lt;li&gt;必须在类的主实现文件中实现所有声明的方法&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;编译时&lt;/strong&gt;添加特性&lt;/li&gt;
&lt;li&gt;只能有一个扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyClass&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Extension 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@property&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;nonatomic&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;strong&lt;/span&gt;) NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;property1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyClass&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Extension 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@property&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;nonatomic&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;strong&lt;/span&gt;) NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;property2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 编译后相当于只有一个扩展
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyClass&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@property&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;nonatomic&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;strong&lt;/span&gt;) NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;property1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@property&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;nonatomic&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;strong&lt;/span&gt;) NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;property2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OC 可以动态添加属性或方法，但开销较大、类型安全性差、降低代码可维护性和可读性，swift 中限制了这种方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>“小速记” App 介绍</title>
      <link>https://wowios.com/post/ios/checkthempicshow/</link>
      <pubDate>Fri, 07 Jul 2023 13:12:14 +0800</pubDate>
      <guid>https://wowios.com/post/ios/checkthempicshow/</guid>
      <description>&lt;h3 id=&#34;小速记各部分功能介绍&#34;&gt;《小速记》各部分功能介绍&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;主页面，各个功能入口&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;../CheckThemPickShow/1.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ToDo 功能&lt;/p&gt;
&lt;p&gt;新建 Todo 时，可设定 Todo 的表情 emoji 、时间段。
右滑删除，左滑完成 Todo，长按 Todo 可设定一个在几分钟后的系统通知推送（提醒这个 Todo）&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;../CheckThemPickShow//2.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每日打卡&lt;/p&gt;
&lt;p&gt;可以新建任务，设定为每日打卡、每周打卡或每月打卡。
打卡任务有进度，任务完成后会将任务归档。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;../CheckThemPickShow/4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;../CheckThemPickShow/3.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数字记录器&lt;/p&gt;
&lt;p&gt;可以为某一件事情添加计数器，用于腐竹记忆生活中的琐碎数字。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;../CheckThemPickShow//5.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据&lt;/p&gt;
&lt;p&gt;Todo、每日打卡、数字记录器是都作为任务，使用 CoreData 存放于本地。
对应的，有 ArchivedTodo、ArchivedDailyTask、ArchivedRecord 作为归档对象，在任务完成后作为记录存放于本地。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Vh4y1E7Gx/?vd_source=c24c919e207e47d8f84bb5082e08de26&#34;&gt;App 使用视频演示&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>如何通过点击 UICollectionViewCell 跳转至对应的 UIViewController</title>
      <link>https://wowios.com/post/ios/viewcontrollertransform/</link>
      <pubDate>Wed, 17 May 2023 22:41:55 +0800</pubDate>
      <guid>https://wowios.com/post/ios/viewcontrollertransform/</guid>
      <description>&lt;h2 id=&#34;跳转部分的实现&#34;&gt;跳转部分的实现&lt;/h2&gt;
&lt;p&gt;我需要从我的 HomeViewController 通过点击不同的 CollectionViewCell 跳至不同的 ViewController&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E7%82%B9%E5%87%BB%20UICollectionViewCell%20%E8%B7%B3%E8%BD%AC%E8%87%B3%E5%AF%B9%E5%BA%94%E7%9A%84%20UIViewController/Untitled.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E7%82%B9%E5%87%BB%20UICollectionViewCell%20%E8%B7%B3%E8%BD%AC%E8%87%B3%E5%AF%B9%E5%BA%94%E7%9A%84%20UIViewController/Untitled%201.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先是需要把目标 ViewController 存放起来，在点击 cell 时可以作为目的地进行 present 跳转。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为我的多个不同的 ViewController 都继承自 UIViewController， 那么我想用它作为父类型存放在cell中。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E7%82%B9%E5%87%BB%20UICollectionViewCell%20%E8%B7%B3%E8%BD%AC%E8%87%B3%E5%AF%B9%E5%BA%94%E7%9A%84%20UIViewController/Untitled%202.png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先把 Main storyboard 存为当前类的属性，以方便初始化各个 collectionView&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E7%82%B9%E5%87%BB%20UICollectionViewCell%20%E8%B7%B3%E8%BD%AC%E8%87%B3%E5%AF%B9%E5%BA%94%E7%9A%84%20UIViewController/Untitled%203.png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;然后使用 storyboard 自带的动态反射方法 instantiateViewController，通过字符串找到对应的 ViewController&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E7%82%B9%E5%87%BB%20UICollectionViewCell%20%E8%B7%B3%E8%BD%AC%E8%87%B3%E5%AF%B9%E5%BA%94%E7%9A%84%20UIViewController/Untitled%204.png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 dataSource 的实现中，将 cell 的属性绑定为对应的 controllerView 目标。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E7%82%B9%E5%87%BB%20UICollectionViewCell%20%E8%B7%B3%E8%BD%AC%E8%87%B3%E5%AF%B9%E5%BA%94%E7%9A%84%20UIViewController/Untitled%205.png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最后是 didTapCell 方法，是点击后的具体要做的动作，即跳转。这里的 target 类型是 UIController。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E7%82%B9%E5%87%BB%20UICollectionViewCell%20%E8%B7%B3%E8%BD%AC%E8%87%B3%E5%AF%B9%E5%BA%94%E7%9A%84%20UIViewController/Untitled%206.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现这样实现不了，原因是第 1 步中 MainChoiceCell 中的 targetController 不能是 weak，若为 weak 那么它在被赋值然后在函数结束时（closure 结束）会释放引用也就是恢复为 nil，所以正确的做法应该是把 weak 去掉。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E7%82%B9%E5%87%BB%20UICollectionViewCell%20%E8%B7%B3%E8%BD%AC%E8%87%B3%E5%AF%B9%E5%BA%94%E7%9A%84%20UIViewController/Untitled%207.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;手指触碰-uicollectionviewcell-但未释放这属于-highlight&#34;&gt;手指触碰 UICollectionViewCell 但未释放，这属于 Highlight&lt;/h2&gt;
&lt;p&gt;UICollectionViewCell 底层来自 UIView。重写 highlight 的 willSet， 手指点在 UICollectionViewCell 区域会触发 highlight 置为 true ；手指不松开，移动到不属于 UICollectionViewCell 的区域，则会触发 highlight 置为 false。&lt;/p&gt;</description>
    </item>
    <item>
      <title>N4000 四网口工控机组网</title>
      <link>https://wowios.com/post/tool/wrt/setnetwork/</link>
      <pubDate>Sat, 13 May 2023 22:43:27 +0800</pubDate>
      <guid>https://wowios.com/post/tool/wrt/setnetwork/</guid>
      <description>&lt;h3 id=&#34;需要用到的硬件&#34;&gt;需要用到的硬件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;工控机本体这里称为 A，&lt;/li&gt;
&lt;li&gt;一台可以连接 WiFi 或者可插入以太网网线的设备称为 B。&lt;/li&gt;
&lt;li&gt;公网的接入端口线称为 C。&lt;/li&gt;
&lt;li&gt;一个 Wifi 路由器D。&lt;/li&gt;
&lt;li&gt;键盘与HDMI 显示器（用于命令行查看系统信息，可省略）、两条网线。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法一不同网段接法&#34;&gt;方法一：”不同网段“接法&lt;/h3&gt;
&lt;p&gt;软路由的 LAN 接 WiFi 的 WAN，连接 WiFi 的设备和直连软路由的设备不算是同一网段。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../N4000%20%E5%9B%9B%E7%BD%91%E5%8F%A3%E5%B7%A5%E6%8E%A7%E6%9C%BA%E7%BB%84%E7%BD%91/Untitled.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;WiFi 所在 192.168.1.x&lt;/p&gt;
&lt;p&gt;软路由所在 192.168.11.x&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以太网连接，从 C 上接一条网线到 A 的 eth1 端口。D 的 WAN 网口和 A 的 eth0 用网线连接。&lt;/li&gt;
&lt;li&gt;使用设备 B，连接 WiFi，然后登入后台管理页面，网址一般在 WiFi 路由器背后有写明。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设备B 需要关键一步：设置为 自动 IP 分配，那么才可以在 B 上访问到 192.168.11.1&lt;/p&gt;
&lt;p&gt;关键配置：&lt;/p&gt;
&lt;p&gt;登入D 的 后台页面（依据不同品牌而定，我这里是 192.168.1.1）。WiFi 路由器 D 的设置，需要设置为 自动获得 IP 地址，拔掉 WiFi 的电源，重启，它会通过A、公网 C 自动获得 IP。这时，连接到该 WiFi 的设备就可以通过 192.168.11.1 进入软路由的管理页面了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo 的一些问题</title>
      <link>https://wowios.com/post/tool/usehugo/someproblem/</link>
      <pubDate>Sat, 11 Mar 2023 16:59:18 +0800</pubDate>
      <guid>https://wowios.com/post/tool/usehugo/someproblem/</guid>
      <description>&lt;h2 id=&#34;若域名有变动&#34;&gt;若域名有变动&lt;/h2&gt;
&lt;p&gt;需要修改三个地方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;workflow 文件夹里 Github Acction 配置文件 &lt;code&gt;Action.yml&lt;/code&gt; 中的 &lt;code&gt;cname:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;config.yaml 中的 &lt;code&gt;baseURL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Github repository setting &lt;code&gt;Pages&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Hugo 发布一篇文章的过程</title>
      <link>https://wowios.com/post/tool/usehugo/publisharticle/</link>
      <pubDate>Sat, 11 Mar 2023 16:00:07 +0800</pubDate>
      <guid>https://wowios.com/post/tool/usehugo/publisharticle/</guid>
      <description>&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;windows：确保有 hugo.exe 在工程目录下, 并且 .gitignore 里面写上 &lt;code&gt;hugo.exe&lt;/code&gt;，即可&lt;/li&gt;
&lt;li&gt;Mac：确保 hugo 已安装就可以&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新建&#34;&gt;新建&lt;/h2&gt;
&lt;p&gt;一般，都在 post 文件夹下放 markdown 文件，使用不同文件夹来归类&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;hugo new post/tool/useHugo/publishArticle.md&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;书写&#34;&gt;书写&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;设定文章的 title, categories, tags&lt;/li&gt;
&lt;li&gt;写入内容。标题大小从 &lt;code&gt;##&lt;/code&gt; 开始&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;本地预览&#34;&gt;本地预览&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;hugo server&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;编译成-html输出到-docs-路径与-github-action-对应&#34;&gt;编译成 html，输出到 /docs （路径与 GitHub Action 对应）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;hugo&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;到这里，就完成了写作&lt;/p&gt;
&lt;h2 id=&#34;git-push&#34;&gt;Git Push&lt;/h2&gt;
&lt;p&gt;先 fetch，再 commit，再 push。&lt;/p&gt;
&lt;h3 id=&#34;github-page-需要重新填写域名&#34;&gt;&lt;del&gt;Github Page 需要重新填写域名&lt;/del&gt;&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;因为 Github Action 在执行的时候会把 master 分支中的 /docs 内所有内容拷贝到 main 分支，这里面不包括 CNAME 文件。所以在 repository 的 setting 的 pages 重新填写域名。&lt;/del&gt;&lt;strong&gt;（问题已经解决，在 workflow &lt;code&gt;action.yml&lt;/code&gt; 中添加 &lt;code&gt;cname: 1-1.link&lt;/code&gt;，所以如果域名有改动，需要在这修改）&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notion文件导出</title>
      <link>https://wowios.com/post/tool/notion/notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/</link>
      <pubDate>Sat, 11 Mar 2023 15:11:32 +0800</pubDate>
      <guid>https://wowios.com/post/tool/notion/notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/</guid>
      <description>&lt;h2 id=&#34;notion-批量文件导出以-pfd格式&#34;&gt;Notion 批量文件导出，以 PFD格式&lt;/h2&gt;
&lt;p&gt;Notion 是一款 markdown 笔记软件，可以快速书写，多端同步，支持文件导出，十分方便。
我在 notion 中写了很多页面，有时要转移到别的地方保存，那么应该怎么做呢？&lt;/p&gt;
&lt;h3 id=&#34;notion-支持导出的文件格式pdfhtmlmd&#34;&gt;notion 支持导出的文件格式：PDF，HTML，MD&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;可是，这几种方法都有缺点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PDF：只能当前页面，导出所有子页面，需要升级 Pro&lt;/li&gt;
&lt;li&gt;HTML：多出了一些附带的文件，文件散乱，转移和浏览都不方便&lt;/li&gt;
&lt;li&gt;MD：导出之后，图片和文本都分开，转移不方便，文件散乱&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;那么有没有更简单的办法获取我自己写的许多页面且保存为-pdf-&#34;&gt;那么，有没有更简单的办法获取我自己写的许多页面，且保存为 PDF ？&lt;/h3&gt;
&lt;p&gt;有的，步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在notion中包含子页面导出 markdown&lt;/li&gt;
&lt;li&gt;使用 vs code 打开，使用插件 Markdown PDF 逐页导出。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;具体操作步骤&#34;&gt;具体操作步骤&lt;/h3&gt;
&lt;p&gt;下图可以看到我的一个页面包含了多个子页面。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;右上角三个点的按钮，选择 export&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled2.png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;导出 markdown&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled3.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;会得到页面和子页面的目录结构&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled5.png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用 vscode 打开。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装插件 ”Markdown PDF“&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled6.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;搜索 Markdown PDF， 点击安装 install。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled7.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置 ”auto convert when save “&lt;/p&gt;
&lt;p&gt;在插件库里可以看到已安装 Markdown PDF&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled8.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; loading=&#34;lazy&#34; src=&#34;../Notion%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/Untitled9.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样一来，打开一个 md 文件，ctrl + s，它就自动转换为 pdf 并输出到源路径了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>各种设计模式</title>
      <link>https://wowios.com/post/design-pattern/all-design-pattern/</link>
      <pubDate>Mon, 11 Jul 2022 18:27:35 +0800</pubDate>
      <guid>https://wowios.com/post/design-pattern/all-design-pattern/</guid>
      <description>&lt;h2 id=&#34;creational&#34;&gt;Creational&lt;/h2&gt;
&lt;p&gt;Object Created Pattern&lt;/p&gt;
&lt;h3 id=&#34;factory-method&#34;&gt;Factory Method&lt;/h3&gt;
&lt;p&gt;Provide the method for creating an instance in the superclass, and allow the subclass to choose the type of the instance.&lt;/p&gt;
&lt;p&gt;在父类中提供创建对象的方法，允许子类决定实例化对象的类型。&lt;/p&gt;
&lt;p&gt;具备的部分：生产者协议、产品协议，往后就可以根据需要来扩展每一种产品。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;factory&#34; loading=&#34;lazy&#34; src=&#34;../imgs/factory.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体的生产者比如 &lt;code&gt;MongoCakeCreator&lt;/code&gt; 的存在是为了实现与产品相关的核心业务逻辑，而不仅仅是创建 &lt;code&gt;MongoCake&lt;/code&gt; 实例。工厂方法将核心业务逻辑从具体产品类中分离出来。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Creator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CakeCreator&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createCake&lt;/span&gt;() -&amp;gt; Cake
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doSomethingForCake&lt;/span&gt;(cake: Cake) -&amp;gt; Cake
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Product&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cake&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doWork&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ConcreteCreator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MongoCakeCreator&lt;/span&gt;: CakeCreator {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; cake: MongoCake?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createCake&lt;/span&gt;() -&amp;gt; Cake {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; cake = MongoCake()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            doSomethingForCake(cake: cake)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cake
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doSomethingForCake&lt;/span&gt;(cake: Cake) -&amp;gt; Cake{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cake.doWork()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cake.doWork()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cake
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ConcreteCreator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChocolateCakeCreator&lt;/span&gt;: CakeCreator {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createCake&lt;/span&gt;() -&amp;gt; Cake {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; cake = ChocolateCake()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            doSomethingForCake(cake: cake)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cake
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doSomethingForCake&lt;/span&gt;(cake: Cake) -&amp;gt; Cake{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cake.doWork()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cake
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MongoCake&lt;/span&gt;: Cake {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doWork&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add some mongo&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChocolateCake&lt;/span&gt;: Cake {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doWork&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add some chocolate&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// If we want to add a type of cake call &amp;#34;PinapleCake&amp;#34;, just need to &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// make it conform to Cake and add a creator that conform to the CakeCreator for the &amp;#34;PinapleCake&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; cakeOne = MongoCakeCreator().createCake()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;abstract-factory&#34;&gt;Abstract Factory&lt;/h3&gt;
&lt;p&gt;Base on the factory method, add an abstract factory. We can call the same abstract factory method to create different mode’s product. If we want to create another mode’s product, we need to change the concrete factory.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mail</title>
      <link>https://wowios.com/post/info/contact/mail/</link>
      <pubDate>Sat, 10 Jul 2021 18:46:21 +0800</pubDate>
      <guid>https://wowios.com/post/info/contact/mail/</guid>
      <description>false</description>
    </item>
    <item>
      <title>竞赛经历与奖项</title>
      <link>https://wowios.com/post/info/certificate/</link>
      <pubDate>Mon, 21 Jun 2021 10:17:24 +0800</pubDate>
      <guid>https://wowios.com/post/info/certificate/</guid>
      <description>&lt;h3 id=&#34;机器人比赛&#34;&gt;机器人比赛&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2019.05 寻宝机器人&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;机器人&#34; loading=&#34;lazy&#34; src=&#34;../certificate/travel_car.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;寻宝&#34; loading=&#34;lazy&#34; src=&#34;../certificate/travel.jpg&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2019.05 超市购物机器人&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;购物&#34; loading=&#34;lazy&#34; src=&#34;../certificate/car.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;购物&#34; loading=&#34;lazy&#34; src=&#34;../certificate/shopping_map.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;购物&#34; loading=&#34;lazy&#34; src=&#34;../certificate/shopping.jpg&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2020.06 创意机器人比赛魔方组&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://compeition-excute.oss-cn-beijing.aliyuncs.com/webFile/2019117/5c3d3f1ffabd11e994a47cd30a5180b6/aWHSLydW_1573089290143.mp4&#34;&gt;魔方机器人 🔗&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;魔方图像识别&#34; loading=&#34;lazy&#34; src=&#34;../certificate/cube_img.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;魔方组&#34; loading=&#34;lazy&#34; src=&#34;../certificate/cube.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;西门子智能制造挑战赛&#34;&gt;西门子智能制造挑战赛&lt;/h3&gt;
&lt;p&gt;2019.08&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;西门子&#34; loading=&#34;lazy&#34; src=&#34;../certificate/Simon.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;大学生挑战杯&#34;&gt;大学生挑战杯&lt;/h3&gt;
&lt;p&gt;2022.07&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;挑战杯&#34; loading=&#34;lazy&#34; src=&#34;../certificate/sound.jpg&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
